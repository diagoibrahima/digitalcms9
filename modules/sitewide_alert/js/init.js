/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

(function (Drupal, drupalSettings) {
  var SitewideAlert = function (_React$Component) {
    _inherits(SitewideAlert, _React$Component);

    function SitewideAlert(props) {
      _classCallCheck(this, SitewideAlert);

      var _this = _possibleConstructorReturn(this, (SitewideAlert.__proto__ || Object.getPrototypeOf(SitewideAlert)).call(this, props));

      _this.state = {
        dismissed: _this.alertWasDismissed(props.dismissalIgnoreBefore),
        showOnThisPage: _this.shouldShowOnThisPage(props.showOnPages, props.negateShowOnPages)
      };
      _this.dismissAlert = _this.dismissAlert.bind(_this);
      _this.alertWasDismissed = _this.alertWasDismissed.bind(_this);
      _this.shouldShowOnThisPage = _this.shouldShowOnThisPage.bind(_this);
      return _this;
    }

    _createClass(SitewideAlert, [{
      key: 'componentDidUpdate',
      value: function componentDidUpdate(prevProps) {
        if (this.props.dismissalIgnoreBefore !== prevProps.dismissalIgnoreBefore || this.props.showOnPages !== prevProps.showOnPages || this.props.negateShowOnPages !== prevProps.negateShowOnPages) {
          this.setState({
            dismissed: this.alertWasDismissed(this.props.dismissalIgnoreBefore),
            showOnThisPage: this.shouldShowOnThisPage(this.props.showOnPages, this.props.negateShowOnPages)
          });
        }
      }
    }, {
      key: 'shouldShowOnThisPage',
      value: function shouldShowOnThisPage() {
        var pages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var negate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        if (pages.length === 0) {
          return true;
        }

        var pagePathMatches = false;
        var currentPath = window.location.pathname;

        for (var i = 0; i < pages.length; i++) {
          var baseUrl = drupalSettings.path.baseUrl.slice(0, -1);
          var page = baseUrl + pages[i];

          if (page.charAt(page.length - 1) === '*') {
            if (currentPath.startsWith(page.substring(0, page.length - 1))) {
              pagePathMatches = true;
              break;
            }
          } else if (page === currentPath) {
            pagePathMatches = true;
            break;
          }
        }

        return negate ? !pagePathMatches : pagePathMatches;
      }
    }, {
      key: 'alertWasDismissed',
      value: function alertWasDismissed(ignoreDismissalBefore) {
        if (!('alert-dismissed-' + this.props.uuid in window.localStorage)) {
          return false;
        }

        var dismissedAtTimestamp = Number(window.localStorage.getItem('alert-dismissed-' + this.props.uuid));

        if (dismissedAtTimestamp < ignoreDismissalBefore) {
          return false;
        }

        return true;
      }
    }, {
      key: 'dismissAlert',
      value: function dismissAlert() {
        window.localStorage.setItem('alert-dismissed-' + this.props.uuid, String(Math.round(new Date().getTime() / 1000)));
        this.setState({
          dismissed: true,
          showOnThisPage: this.state.showOnThisPage
        });
      }
    }, {
      key: 'render',
      value: function render() {
        if (this.props.dismissible && this.state.dismissed) {
          return null;
        }

        if (!this.state.showOnThisPage) {
          return null;
        }

        var alertClasses = 'sitewide-alert alert';
        if (this.props.styleClass !== '') {
          alertClasses += ' ' + this.props.styleClass;
        }

        return React.createElement(
          'div',
          { className: alertClasses, role: 'alert' },
          React.createElement('span', { dangerouslySetInnerHTML: { __html: this.props.message } }),
          this.props.dismissible && React.createElement(
            'button',
            { className: 'close', onClick: this.dismissAlert, 'aria-label': 'Close' },
            React.createElement(
              'span',
              { 'aria-hidden': 'true' },
              '\xD7'
            )
          )
        );
      }
    }]);

    return SitewideAlert;
  }(React.Component);

  var SitewideAlerts = function (_React$Component2) {
    _inherits(SitewideAlerts, _React$Component2);

    function SitewideAlerts(props) {
      _classCallCheck(this, SitewideAlerts);

      var _this2 = _possibleConstructorReturn(this, (SitewideAlerts.__proto__ || Object.getPrototypeOf(SitewideAlerts)).call(this, props));

      _this2.state = {
        error: null,
        isLoaded: false,
        sitewideAlerts: []
      };
      return _this2;
    }

    _createClass(SitewideAlerts, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        var _this3 = this;

        this.getAlerts();
        if (drupalSettings.sitewideAlert.automaticRefresh === true) {
          this.interval = setInterval(function () {
            _this3.getAlerts();
          }, drupalSettings.sitewideAlert.refreshInterval < 1000 ? 1000 : drupalSettings.sitewideAlert.refreshInterval);
        }
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        clearInterval(this.interval);
      }
    }, {
      key: 'getAlerts',
      value: function getAlerts() {
        var _this4 = this;

        fetch(window.location.origin + drupalSettings.path.baseUrl + drupalSettings.path.pathPrefix + 'sitewide_alert/load').then(function (res) {
          return res.json();
        }).then(function (result) {
          _this4.setState({
            isLoaded: true,
            sitewideAlerts: result.sitewideAlerts
          });
        }, function (error) {
          _this4.setState({
            isLoaded: true,
            error: error
          });
        });
      }
    }, {
      key: 'render',
      value: function render() {
        var _state = this.state,
            error = _state.error,
            isLoaded = _state.isLoaded,
            sitewideAlerts = _state.sitewideAlerts;

        if (error) {
          console.log('Unable to to load alerts.');
          return React.createElement('div', null);
        } else if (!isLoaded) {
          return React.createElement('div', null);
        } else {
          return React.createElement(
            'div',
            null,
            sitewideAlerts.map(function (sitewideAlert) {
              return React.createElement(SitewideAlert, {
                key: sitewideAlert.uuid,
                uuid: sitewideAlert.uuid,
                message: sitewideAlert.message,
                styleClass: sitewideAlert.styleClass,
                dismissible: sitewideAlert.dismissible,
                dismissalIgnoreBefore: sitewideAlert.dismissalIgnoreBefore,
                showOnPages: sitewideAlert.showOnPages,
                negateShowOnPages: sitewideAlert.negateShowOnPages
              });
            })
          );
        }
      }
    }]);

    return SitewideAlerts;
  }(React.Component);

  Drupal.behaviors.sitewide_alert_init = {
    attach: function attach(context, settings) {
      ReactDOM.render(React.createElement(SitewideAlerts, null), document.getElementById('sitewide-alert'));
    }
  };
})(Drupal, drupalSettings);